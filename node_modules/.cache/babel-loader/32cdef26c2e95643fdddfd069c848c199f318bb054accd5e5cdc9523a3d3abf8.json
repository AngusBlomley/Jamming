{"ast":null,"code":"const clientId = '4a3390e8b47f4d75b70dae589ff7fe4a';\nconst redirectUri = 'http://localhost:3000';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    // check for an access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      //This clears the parameters, allowing us to grab a new access token when it expires.\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n  async search(term) {\n    const accessToken = Spotify.getAccessToken();\n    const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    const jsonResponse = await response.json();\n    if (!jsonResponse.tracks) {\n      return [];\n    }\n    return jsonResponse.tracks.items.map(track => ({\n      id: track.id,\n      name: track.name,\n      artist: track.artists[0].name,\n      album: track.album.name,\n      uri: track.uri\n    }));\n  },\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","response","fetch","headers","Authorization","jsonResponse","json","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","then","method","body","JSON","stringify","playlistId","uris"],"sources":["C:/Users/ablom/my-app/src/util/Spotify.js"],"sourcesContent":["const clientId = '4a3390e8b47f4d75b70dae589ff7fe4a';\nconst redirectUri = 'http://localhost:3000';\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if(accessToken) {\n            return accessToken;\n        }\n        \n        // check for an access token match\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            //This clears the parameters, allowing us to grab a new access token when it expires.\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n\n    async search(term) {\n        const accessToken = Spotify.getAccessToken();\n        const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        });\n        const jsonResponse = await response.json();\n        if (!jsonResponse.tracks) {\n            return [];\n        }\n        return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n        }));\n    },\n\n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris.length) {\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}`};\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, \n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: name})\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ uris: trackUris})\n                })\n            })\n        })\n    }\n}\n\nexport default Spotify;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}